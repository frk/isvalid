// DO NOT EDIT. This file was generated by "github.com/frk/isvalid".

package testdata

import (
	"errors"
	"strings"

	"github.com/frk/isvalid"
)

func (v BaseFieldsWithRulesAndNotnilValidator) Validate() error {
	if v.F11a == nil {
		return errors.New("F11a cannot be nil")
	}
	if v.F11b == nil || *v.F11b == nil {
		return errors.New("F11b cannot be nil")
	}
	if v.F11c == nil || *v.F11c == nil || **v.F11c == nil || ***v.F11c == nil || ****v.F11c == nil {
		return errors.New("F11c cannot be nil")
	}
	if v.F12a == nil || *v.F12a == nil {
		return errors.New("F12a cannot be nil")
	} else if !isvalid.Email(**v.F12a) {
		return errors.New("F12a must be a valid email address")
	}
	if v.F13a == nil {
		return errors.New("F13a cannot be nil")
	} else if !isvalid.Hex(*v.F13a) {
		return errors.New("F13a must be a valid hexadecimal string")
	} else if len(*v.F13a) < 8 || len(*v.F13a) > 128 {
		return errors.New("F13a must be of length between: 8 and 128 (inclusive)")
	}
	if v.F13b == nil || *v.F13b == nil || **v.F13b == nil {
		return errors.New("F13b cannot be nil")
	} else if !isvalid.Hex(***v.F13b) {
		return errors.New("F13b must be a valid hexadecimal string")
	} else if len(***v.F13b) < 8 || len(***v.F13b) > 128 {
		return errors.New("F13b must be of length between: 8 and 128 (inclusive)")
	}
	if v.F14 == nil || *v.F14 == nil || **v.F14 == nil || ***v.F14 == nil || ****v.F14 == nil {
		return errors.New("F14 cannot be nil")
	} else if !strings.HasPrefix(*****v.F14, "foo") {
		return errors.New("F14 must be prefixed with: \"foo\"")
	} else if !strings.Contains(*****v.F14, "bar") {
		return errors.New("F14 must contain substring: \"bar\"")
	} else if !strings.HasSuffix(*****v.F14, "baz") && !strings.HasSuffix(*****v.F14, "quux") {
		return errors.New("F14 must be suffixed with: \"baz\" or \"quux\"")
	} else if len(*****v.F14) < 8 || len(*****v.F14) > 64 {
		return errors.New("F14 must be of length between: 8 and 64 (inclusive)")
	}
	return nil
}
