// DO NOT EDIT. This file was generated by "github.com/frk/isvalid".

package testdata

import (
	"errors"
	"strings"

	"github.com/frk/isvalid"
)

func (v NestedFieldsWithRulesAndNotnilValidator) Validate() error {
	if v.G2.F1 == nil {
		return errors.New("G2.F1 cannot be nil")
	} else if !isvalid.Email(*v.G2.F1) {
		return errors.New("G2.F1 must be a valid email address")
	}
	if v.G2.F2 == nil || *v.G2.F2 == nil {
		return errors.New("G2.F2 cannot be nil")
	} else if !isvalid.Email(**v.G2.F2) {
		return errors.New("G2.F2 must be a valid email address")
	}
	if v.G2.G3 == nil {
		return errors.New("G2.G3 cannot be nil")
	} else {
		f := *v.G2.G3
		if f.F3 == nil || *f.F3 == nil || **f.F3 == nil {
			return errors.New("G2.G3.F3 cannot be nil")
		} else if !isvalid.Hex(***f.F3) {
			return errors.New("G2.G3.F3 must be a valid hexadecimal string")
		} else if len(***f.F3) < 8 || len(***f.F3) > 128 {
			return errors.New("G2.G3.F3 must be of length between: 8 and 128 (inclusive)")
		}
	}
	if v.G2.G4 == nil || *v.G2.G4 == nil || **v.G2.G4 == nil {
		return errors.New("G2.G4 cannot be nil")
	} else {
		f := ***v.G2.G4
		if f.G5 == nil || *f.G5 == nil {
			return errors.New("G2.G4.G5 cannot be nil")
		} else {
			f := **f.G5
			if f.F3 == nil || *f.F3 == nil {
				return errors.New("G2.G4.G5.F3 cannot be nil")
			} else if !strings.HasPrefix(**f.F3, "foo") {
				return errors.New("G2.G4.G5.F3 must be prefixed with: \"foo\"")
			} else if !strings.Contains(**f.F3, "bar") {
				return errors.New("G2.G4.G5.F3 must contain substring: \"bar\"")
			} else if !strings.HasSuffix(**f.F3, "baz") && !strings.HasSuffix(**f.F3, "quux") {
				return errors.New("G2.G4.G5.F3 must be suffixed with: \"baz\" or \"quux\"")
			} else if len(**f.F3) < 8 || len(**f.F3) > 64 {
				return errors.New("G2.G4.G5.F3 must be of length between: 8 and 64 (inclusive)")
			}
		}
	}
	return nil
}
