// DO NOT EDIT. This file was generated by "github.com/frk/isvalid".

package testdata

import (
	"errors"
	"strings"

	"github.com/frk/isvalid"
)

func (v NestedFieldsWithRulesValidator) Validate() error {
	{
		f := v.G1
		if !isvalid.Email(f.F4) {
			return errors.New("G1.F4 must be a valid email")
		}
		{
			f := f.GA
			if !isvalid.Email(f.F4) {
				return errors.New("G1.GA.F4 must be a valid email")
			}
			if !isvalid.Hex(f.F5) {
				return errors.New("G1.GA.F5 must be a valid hexadecimal string")
			} else if len(f.F5) < 8 || len(f.F5) > 128 {
				return errors.New("G1.GA.F5 must be of length between: 8 and 128 (inclusive)")
			}
			{
				f := f.GB
				if !isvalid.Email(f.F4a) {
					return errors.New("G1.GA.GB.F4a must be a valid email")
				}
				if !strings.HasPrefix(f.GC.F6, "foo") {
					return errors.New("G1.GA.GB.GC.F6 must be prefixed with: \"foo\"")
				} else if !strings.Contains(f.GC.F6, "bar") {
					return errors.New("G1.GA.GB.GC.F6 must contain substring: \"bar\"")
				} else if !strings.HasSuffix(f.GC.F6, "baz") && !strings.HasSuffix(f.GC.F6, "quux") {
					return errors.New("G1.GA.GB.GC.F6 must be suffixed with: \"baz\" or \"quux\"")
				} else if len(f.GC.F6) < 8 || len(f.GC.F6) > 64 {
					return errors.New("G1.GA.GB.GC.F6 must be of length between: 8 and 64 (inclusive)")
				}
				if !isvalid.Email(f.F4b) {
					return errors.New("G1.GA.GB.F4b must be a valid email")
				}
				if !isvalid.Hex(f.F5) {
					return errors.New("G1.GA.GB.F5 must be a valid hexadecimal string")
				} else if len(f.F5) < 8 || len(f.F5) > 128 {
					return errors.New("G1.GA.GB.F5 must be of length between: 8 and 128 (inclusive)")
				}
			}
		}
		if !strings.HasPrefix(f.F6, "foo") {
			return errors.New("G1.F6 must be prefixed with: \"foo\"")
		} else if !strings.Contains(f.F6, "bar") {
			return errors.New("G1.F6 must contain substring: \"bar\"")
		} else if !strings.HasSuffix(f.F6, "baz") && !strings.HasSuffix(f.F6, "quux") {
			return errors.New("G1.F6 must be suffixed with: \"baz\" or \"quux\"")
		} else if len(f.F6) < 8 || len(f.F6) > 64 {
			return errors.New("G1.F6 must be of length between: 8 and 64 (inclusive)")
		}
	}
	return nil
}
